import os
import telebot
from telebot import types
from yt_dlp import YoutubeDL
from dotenv import load_dotenv
import re

# üîê –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ç–æ–∫–µ–Ω–∞ –∑ .env
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")

if not BOT_TOKEN:
    print("‚ùå BOT_TOKEN –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞")
    exit(1)

bot = telebot.TeleBot(BOT_TOKEN)

# üì¶ –°–ª–æ–≤–Ω–∏–∫ –¥–ª—è —Ç–∏–º—á–∞—Å–æ–≤–æ–≥–æ –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ –ø–æ—à—É–∫—É
track_results = {}


# -------------------------------- SOUND SEARCH -------------------------------- #

def create_main_menu():
    """–°—Ç–≤–æ—Ä—é—î –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏"""
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)

    franko = types.KeyboardButton('–Ü–≤–∞–Ω –Ø–∫–æ–≤–∏—á')
    boi4uk = types.KeyboardButton('–ë–æ–π—á—É–∫')
    start = types.KeyboardButton("knopka")

    markup.row(boi4uk, franko)
    markup.row(start)
    return markup


@bot.message_handler(commands=["start"])
def main_menu(message):
    """–û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /start"""
    markup = create_main_menu()
    bot.send_message(message.chat.id, "–í–∏–±–µ—Ä–∏ –æ–ø—Ü—ñ—é:", reply_markup=markup)


# —Ñ—É–Ω–∫—Ü—ñ—ó –¥–ª—è –∫–Ω–æ–ø–æ–∫
@bot.message_handler(func=lambda message: message.text in [
    "–Ü–≤–∞–Ω –Ø–∫–æ–≤–∏—á", "–ë–æ–π—á—É–∫", "—Ö—É–π", "knopka", "darina"
])
def button2(message):
    """–û–±—Ä–æ–±–Ω–∏–∫ –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é"""
    try:
        if message.text == "–Ü–≤–∞–Ω –Ø–∫–æ–≤–∏—á":
            if os.path.exists('123.png'):
                with open('123.png', 'rb') as photo:
                    bot.send_photo(message.chat.id, photo)
            else:
                bot.send_message(message.chat.id, "‚ùå –§–∞–π–ª 123.png –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
        elif message.text == "darina":
            if os.path.exists('2025.png'):
                with open('2025.png', 'rb') as photo:
                    bot.send_photo(message.chat.id, photo)
            else:
                bot.send_message(message.chat.id, "‚ùå –§–∞–π–ª 2222.png –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
        elif message.text == "–ë–æ–π—á—É–∫":
            bot.send_message(message.chat.id, "–¥–∞—É–Ω —Ç–æ–ª—Å—Ç–∏–π")
        elif message.text == "—Ö—É–π":
            bot.send_message(message.chat.id, "@krsqw")
        elif message.text == "knopka":
            bot.send_message(message.chat.id, "–∫–Ω–æ–ø–∫–∞")
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤ button2: {e}")
        bot.send_message(message.chat.id, "‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞")


def search_soundcloud_tracks(query, limit=10):
    """–ü–æ—à—É–∫ —Ç—Ä–µ–∫—ñ–≤ –Ω–∞ SoundCloud"""
    print(f"üîç –ü–æ—à—É–∫ SoundCloud: {query}")
    ydl_opts = {
        'quiet': True,
        'extract_flat': True,
        'skip_download': True,
        'no_warnings': True,
    }
    try:
        with YoutubeDL(ydl_opts) as ydl:
            search_results = ydl.extract_info(f"scsearch{limit}:{query}", download=False)
            if not search_results or 'entries' not in search_results:
                return []

            return [
                {'full_url': entry.get('url'), 'title': entry.get('title')}
                for entry in search_results.get('entries', [])
                if entry and entry.get('url')
            ]
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ SoundCloud: {e}")
        return []


def search_youtube_tracks(query, limit=5):
    print(f"üîç –ü–æ—à—É–∫ YouTube: {query}")
    ydl_opts = {
        'quiet': True,
        'extract_flat': True,
        'skip_download': True,
        'no_warnings': True,
    }
    try:
        with YoutubeDL(ydl_opts) as ydl:
            search_results = ydl.extract_info(f"ytsearch{limit}:{query}", download=False)
            if not search_results or 'entries' not in search_results:
                return []

            return [
                {'full_url': entry.get('url'), 'title': entry.get('title')}
                for entry in search_results.get('entries', [])
                if entry and entry.get('url')
            ]
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ YouTube: {e}")
        return []


def download_mp3_from_url(url, platform="SoundCloud"):
    """–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è MP3 –∑ URL"""
    print(f"‚¨áÔ∏è –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è ({platform}): {url}")

    # –°—Ç–≤–æ—Ä—é—î–º–æ –ø–∞–ø–∫—É downloads —è–∫—â–æ –Ω–µ —ñ—Å–Ω—É—î
    os.makedirs('downloads', exist_ok=True)

    ydl_opts = {
        'format': 'bestaudio/best',
        'outtmpl': 'downloads/%(title)s.%(ext)s',
        'postprocessors': [{
            'key': 'FFmpegExtractAudio',
            'preferredcodec': 'mp3',
            'preferredquality': '192',
        }],
        'quiet': True,
        'no_warnings': True,
    }

    try:
        with YoutubeDL(ydl_opts) as ydl:
            info = ydl.extract_info(url, download=False)

            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å
            duration = info.get('duration', 0)
            if duration and duration > 5400:
                raise ValueError("‚è≥ –¢—Ä–µ–∫ –∑–∞–Ω–∞–¥—Ç–æ –¥–æ–≤–≥–∏–π (–º–∞–∫—Å 1.5 –≥–æ–¥–∏–Ω–∏)")

            # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Ñ–∞–π–ª
            info = ydl.extract_info(url, download=True)

            # –§–æ—Ä–º—É—î–º–æ —ñ–º'—è —Ñ–∞–π–ª—É
            original_filename = ydl.prepare_filename(info)
            base_name = os.path.splitext(original_filename)[0]
            filename = base_name + '.mp3'

            # –ë–µ–∑–ø–µ—á–Ω–µ —ñ–º'—è —Ñ–∞–π–ª—É
            safe_filename = re.sub(r'[<>:"/\\|?*]', '_', filename)

            # –Ø–∫—â–æ —Ñ–∞–π–ª —É–∂–µ —ñ—Å–Ω—É—î ‚Üí –¥–æ–¥–∞—î–º–æ —Å—É—Ñ—ñ–∫—Å
            if os.path.exists(safe_filename):
                base, ext = os.path.splitext(safe_filename)
                counter = 1
                new_name = f"{base}_{counter}{ext}"
                while os.path.exists(new_name):
                    counter += 1
                    new_name = f"{base}_{counter}{ext}"
                safe_filename = new_name

            # –ü–µ—Ä–µ–π–º–µ–Ω–æ–≤—É—î–º–æ —Ñ–∞–π–ª —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ
            if filename != safe_filename and os.path.exists(filename):
                os.rename(filename, safe_filename)
            elif os.path.exists(original_filename) and original_filename != safe_filename:
                os.rename(original_filename, safe_filename)

            return {
                'filename': safe_filename,
                'title': info.get('title', 'Unknown')
            }

    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è: {e}")
        raise


def download_mp3_from_soundcloud(url, fallback_query=None):
    """–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑ SoundCloud –∑ fallback –Ω–∞ YouTube"""
    try:
        return download_mp3_from_url(url, platform="SoundCloud")
    except Exception as e:
        print(f"‚ùå SoundCloud –≤–ø–∞–≤: {e}")
        if fallback_query:
            print("üîÑ –ü—Ä–æ–±—É—î–º–æ –∑–Ω–∞–π—Ç–∏ –Ω–∞ YouTube...")
            results = search_youtube_tracks(fallback_query, limit=1)
            if results:
                return download_mp3_from_url(results[0]['full_url'], platform="YouTube")
        raise e


# -------------------------------- HANDLERS -------------------------------- #

@bot.message_handler(commands=['music'])
def music_search_handler(message):
    """–û–±—Ä–æ–±–Ω–∏–∫ –ø–æ—à—É–∫—É –º—É–∑–∏–∫–∏"""
    try:
        parts = message.text.split(maxsplit=1)
        if len(parts) < 2:
            bot.send_message(message.chat.id, "–í–∫–∞–∂–∏ –Ω–∞–∑–≤—É —Ç—Ä–µ–∫—É –∞–±–æ –≤–∏–∫–æ–Ω–∞–≤—Ü—è. –ù–∞–ø—Ä–∏–∫–ª–∞–¥:\n/music –õ—É–∫'—è–Ω –ö—Ä–∞—Å–∞–≤—á—ñ–∫")
            return

        query = parts[1].strip()
        if not query:
            bot.send_message(message.chat.id, "–í–∫–∞–∂–∏ –Ω–∞–∑–≤—É —Ç—Ä–µ–∫—É –∞–±–æ –≤–∏–∫–æ–Ω–∞–≤—Ü—è.")
            return

        # –ü–æ—à—É–∫ –Ω–∞ SoundCloud
        results = search_soundcloud_tracks(query)

        if not results:
            bot.send_message(message.chat.id, "–ù–∞ SoundCloud –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, —à—É–∫–∞—î–º–æ –Ω–∞ YouTube...")
            results = search_youtube_tracks(query)

            if not results:
                bot.send_message(message.chat.id, "–¥–∞—É–Ω–Ω–Ω üò¢")
                return

        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏
        track_results[message.chat.id] = results

        # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É
        markup = types.InlineKeyboardMarkup()
        for i, track in enumerate(results):
            title = (track.get('title') or "–ë–µ–∑ –Ω–∞–∑–≤–∏")[:35]
            markup.add(types.InlineKeyboardButton(
                text=f"{i + 1}. {title}",
                callback_data=f"download_{i}"
            ))

        bot.send_message(message.chat.id, "üéß –í–∏–±–µ—Ä–∏ —Ç—Ä–µ–∫:", reply_markup=markup)

    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤ music_search_handler: {e}")
        bot.send_message(message.chat.id, "‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–æ—à—É–∫—É")


@bot.callback_query_handler(func=lambda call: call.data.startswith("download_"))
def callback_download(call):
    """–û–±—Ä–æ–±–Ω–∏–∫ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ç—Ä–µ–∫—É"""
    try:
        index = int(call.data.replace("download_", ""))
        chat_id = call.message.chat.id

        results = track_results.get(chat_id)
        if not results or index >= len(results):
            bot.send_message(chat_id, "‚ùå –¢—Ä–µ–∫ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
            return

        track = results[index]
        url = track.get('full_url')
        query = track.get('title')

        if not url:
            bot.send_message(chat_id, "‚ùå URL —Ç—Ä–µ–∫—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
            return

        bot.send_message(chat_id, "‚è≥ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ç—Ä–µ–∫—É...")

        result = download_mp3_from_soundcloud(url, fallback_query=query)

        if not os.path.exists(result['filename']):
            bot.send_message(chat_id, "‚ùå –§–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –ø—ñ—Å–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è.")
            return

        with open(result['filename'], 'rb') as audio:
            bot.send_audio(chat_id, audio, caption=f"‚úÖ {result['title']}")

        # –í–∏–¥–∞–ª—è—î–º–æ —Ñ–∞–π–ª –ø—ñ—Å–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏
        try:
            os.remove(result['filename'])
        except OSError as e:
            print(f"‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ —Ñ–∞–π–ª: {e}")

    except ValueError as ve:
        bot.send_message(call.message.chat.id, f"‚ùå {str(ve)}")
    except Exception as e:
        print(f"‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –≤ callback_download: {e}")
        bot.send_message(call.message.chat.id, f"‚ùå –ü–æ–º–∏–ª–∫–∞: {str(e)}")
    finally:
        # –í—ñ–¥–ø–æ–≤—ñ–¥–∞—î–º–æ –Ω–∞ callback —â–æ–± –ø—Ä–∏–±—Ä–∞—Ç–∏ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
        try:
            bot.answer_callback_query(call.id)
        except:
            pass


# -------------------------------- START BOT -------------------------------- #

if __name__ == "__main__":
    try:
        print("ü§ñ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
        bot.remove_webhook()
        print("‚úÖ Webhook –≤–∏–¥–∞–ª–µ–Ω–æ, –∑–∞–ø—É—Å–∫–∞—î–º–æ polling...")
        bot.polling(none_stop=True, interval=0, timeout=60)
    except KeyboardInterrupt:
        print("‚èπÔ∏è –ë–æ—Ç –∑—É–ø–∏–Ω–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º")
    except Exception as e:
        print("‚ùå –ë–æ—Ç –Ω–µ –∑–∞–ø—É—â–µ–Ω–æ. –ú–æ–∂–ª–∏–≤–æ, –≤–∂–µ –∑–∞–ø—É—â–µ–Ω–æ —ñ–Ω—à–∏–π —ñ–Ω—Å—Ç–∞–Ω—Å.")
        print("–ü–æ–º–∏–ª–∫–∞:", e)