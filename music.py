import os

import telebot
from telebot import types
from yt_dlp import YoutubeDL

Bot = telebot.TeleBot("7949282737:AAE6nVeoNoL-nMdF_U0h3itKKV1FClIoRBU")

# üîß –°–ª–æ–≤–Ω–∏–∫ –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ –ø–æ—à—É–∫—É –ø–æ chat_id
track_results = {}

# –∫–æ–º–∞–Ω–¥–∞ /start
# @Bot.message_handler(commands=["start"])
# def button(information):
#     markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
#
#     franko = types.KeyboardButton('–Ü–≤–∞–Ω –Ø–∫–æ–≤–∏—á')
#     boi4uk = types.KeyboardButton('–ë–æ–π—á—É–∫')
#     start = types.KeyboardButton("knopka")
#
#     markup.row(boi4uk, franko)
#     markup.row(start)
#     Bot.send_message(information.chat.id, "–ü—Ä–∏–≤—ñ—Ç! –û–±–µ—Ä–∏ –∫–Ω–æ–ø–∫—É üëá", reply_markup=markup)
#
# # —Ñ—É–Ω–∫—Ü—ñ—ó –¥–ª—è –∫–Ω–æ–ø–æ–∫
# @Bot.message_handler(func=lambda message: message.text in [
#     "–Ü–≤–∞–Ω –Ø–∫–æ–≤–∏—á", "–ë–æ–π—á—É–∫"
# ])
# def button2(message):
#     if message.text == "–Ü–≤–∞–Ω –Ø–∫–æ–≤–∏—á":
#         with open('123.png', 'rb') as photo:
#             Bot.send_photo(message.chat.id, photo)
#     elif message.text == "–ë–æ–π—á—É–∫":
#         Bot.send_message(message.chat.id, "–¥–∞—É–Ω —Ç–æ–ª—Å—Ç–∏–π")


#--------------------------------------------------------------------------------------------------------------

# MUZIKA
def search_soundcloud_tracks(query, limit=10):
    print(f"üîç –®—É–∫–∞—î–º–æ (yt_dlp): {query}")
    ydl_opts = {
        'quiet': True,
        'extract_flat': True,
        'skip_download': True,
        'force_generic_extractor': False,
    }

    with YoutubeDL(ydl_opts) as ydl:
        try:
            search_results = ydl.extract_info(f"scsearch{limit}:{query}", download=False)
            if 'entries' not in search_results:
                return []

            results = []
            for entry in search_results['entries']:
                results.append({
                    'full_url': entry.get('url'),
                    'title': entry.get('title'),
                })
            return results
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –ø–æ—à—É–∫—É: {e}")
            return []

def search_youtube_tracks(query, limit=5):
    print(f"üîç –®—É–∫–∞—î–º–æ –Ω–∞ YouTube: {query}")
    ydl_opts = {
        'quiet': True,
        'extract_flat': True,
        'skip_download': True,
        'force_generic_extractor': False,
    }

    with YoutubeDL(ydl_opts) as ydl:
        try:
            search_results = ydl.extract_info(f"ytsearch{limit}:{query}", download=False)
            if 'entries' not in search_results:
                return []

            results = []
            for entry in search_results['entries']:
                results.append({
                    'full_url': entry.get('url'),
                    'title': entry.get('title'),
                })
            return results
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–æ—à—É–∫—É YouTube: {e}")
            return []

def download_mp3_from_soundcloud(url):
    print(f"‚¨áÔ∏è –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è: {url}")
    ydl_opts = {
        'format': 'bestaudio/best',
        'outtmpl': '%(title)s.%(ext)s',
        'postprocessors': [{
            'key': 'FFmpegExtractAudio',
            'preferredcodec': 'mp3',
            'preferredquality': '192',
        }],
        'quiet': True,
    }

    with YoutubeDL(ydl_opts) as ydl:
        info = ydl.extract_info(url, download=True)
        filename = ydl.prepare_filename(info).rsplit('.', 1)[0] + '.mp3'
        return {'filename': filename, 'title': info.get('title', 'Unknown')}

@Bot.message_handler(commands=['music'])
def music_search_handler(message):
    parts = message.text.split(maxsplit=1)
    if len(parts) < 2:
        Bot.send_message(message.chat.id, "–í–∫–∞–∂–∏ –Ω–∞–∑–≤—É —Ç—Ä–µ–∫—É –∞–±–æ –∞–≤—Ç–æ—Ä–∞. –ù–∞–ø—Ä–∏–∫–ª–∞–¥:\n/music –õ—É–∫'—è–Ω –ö—Ä–∞—Å–∞–≤—á—ñ–∫")
        return

    query = parts[1]
    results = search_soundcloud_tracks(query)

    if not results:
        Bot.send_message(message.chat.id, "–Ω–∞ —Å–∞—É–Ω–∫–ª–∞—É–¥—ñ –Ω–µ –∑–Ω–∞–π—à–ª–æ, —à—É–∫–∞—î–º—Ä –≤ –Æ–¢–Æ–ë:")
        results = search_youtube_tracks(query)

        if not results:
            Bot.send_message(message.chat.id, "–ø–æ–º–∏–ª–∫–∞ –∑–∞–ø–∏—Ç—É, –∞–±–æ —Ç—Ä–µ–∫—É –Ω–µ —ñ—Å–Ω—É—î, –∞–±–æ –≤–∏ –ø—Ä–æ—Å—Ç–æ –¥—ñ–±—ñ–ª")
            return

    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –ø–æ—à—É–∫—É
    track_results[message.chat.id] = results

    markup = types.InlineKeyboardMarkup()
    for i, track in enumerate(results):
        title = track['title'][:35] or "–ë–µ–∑ –Ω–∞–∑–≤–∏"
        markup.add(
            types.InlineKeyboardButton(
                text=f"{i + 1}. {title}",
                callback_data=f"download_{i}"
            )
        )

    Bot.send_message(message.chat.id, "üéß –í–∏–±–µ—Ä–∏ —Ç—Ä–µ–∫ –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è:", reply_markup=markup)

@Bot.callback_query_handler(func=lambda call: call.data.startswith("download_"))
def callback_download(call):
    index = int(call.data.replace("download_", ""))
    chat_id = call.message.chat.id

    results = track_results.get(chat_id)
    if not results or index >= len(results):
        Bot.send_message(chat_id, "‚ùå –¢—Ä–µ–∫ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∞–±–æ —Å–ø–∏—Å–æ–∫ –∑–∞—Å—Ç–∞—Ä—ñ–≤. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑.")
        return

    url = results[index]['full_url']
    try:
        Bot.send_message(chat_id, "‚è≥ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ç—Ä–µ–∫—É...")
        result = download_mp3_from_soundcloud(url)
        with open(result['filename'], 'rb') as audio:
            Bot.send_audio(chat_id, audio, caption=f"‚úÖ {result['title']}")
        os.remove(result['filename'])
    except Exception as e:
        Bot.send_message(chat_id, f"‚ùå –ü–æ–º–∏–ª–∫–∞: {str(e)}")

Bot.polling(non_stop=True)
